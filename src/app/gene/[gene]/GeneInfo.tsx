'use client'

import ReactMarkdown from 'react-markdown'
import rehypeRaw from "rehype-raw";
import useHash from '@/components/usehash';
import type trpc from '@/lib/trpc/server'

/**
 * Format citations by:
 *   - collapsing consecutive citations
 *   - adding the anchor to footnotes
 */
function reformat(text: string) {
  let first_footnote = true
  let i = 0
  let new_text = ''
  // multiple citations at a time
  for (const m1 of text.matchAll(/\[\^(\d+)\]?((,?\s*\[?\^?\d+\]?)*)(:?)/g)) {
    const updated = [] as string[]

    if (m1[4] === ':') {
      if (first_footnote) {
        updated.push('<section id="refs">\n')
        updated.push('\n### References\n')
        first_footnote = false
      }
      updated.push(`\n<a id="ref-${m1[1]}" class="no-underline"><strong>[${m1[1]}]</strong></a>\n`)
      new_text += text.slice(i, m1.index) + updated.join('')
    } else {
      let contiguous = [+m1[1]]
      for (const m2 of m1[2].matchAll(/\[?\^?(\d+)\]?/g)) {
        const current = +m2[1]
        if (current === contiguous[contiguous.length-1]+1) {
          contiguous.push(current)
        } else if (contiguous.length > 2) {
          updated.push(`[${contiguous[0]}](#ref-${contiguous[0]})-[${contiguous[contiguous.length-1]}](#ref-${contiguous[contiguous.length-1]})`)
          contiguous = [current]
        } else {
          updated.push(...contiguous.map(el => `[${el}](#ref-${el})`))
          contiguous = [current]
        }
      }
      if (contiguous.length > 2) {
        updated.push(`[${contiguous[0]}](#ref-${contiguous[0]})-[${contiguous[contiguous.length-1]}](#ref-${contiguous[contiguous.length-1]})`)
      } else  {
        updated.push(...contiguous.map(el => `[${el}](#ref-${el})`))
      }
      new_text += text.slice(i, m1.index) + `<sup>${updated.join(',')}</sup>`
    }
    i = m1.index + m1[0].length
  }
  new_text += text.slice(i)
  if (first_footnote) new_text += '</section>'
  return new_text
}

type UnPromise<PT> = PT extends Promise<infer T> ? T : never

export default function GeneInfo({ gene_info }: { gene_info: Exclude<UnPromise<ReturnType<typeof trpc.gene_info>>, undefined> }) {
  return (
    <div className="prose max-w-full border border-b-0 border-secondary rounded-t-lg p-4 flex flex-col gap-4">
      <div className="flex flex-col">
        <h1 className="mb-0 text-6xl">{gene_info.symbol}</h1>
        <h5 className="mt-0 text-2xl">{gene_info.name}</h5>
      </div>
      <div role="tablist" className="tabs tabs-lift tabs-xl">
        <input type="radio" name="my_tabs" role="tab" className="tab whitespace-nowrap" aria-label="NCBI Description" disabled={!gene_info.description} defaultChecked />
        <div role="tabpanel" className="tab-content bg-base-100 border-base-300 px-6 prose  max-w-none">
          <p>{gene_info.description ?? ''}</p>
          <p><i>Sourced from NCBI EUtils.</i></p>
        </div>

        <input type="radio" name="my_tabs" role="tab" className="tab whitespace-nowrap" aria-label="AI Overview (DeepDive GPT4o)" disabled={!gene_info.deepdive_gpt4o_description} defaultChecked={!gene_info.description} />
        <div role="tabpanel" className="tab-content bg-base-100 border-base-300 px-6 prose  max-w-none">
          <div className="prose-p:m-0" dangerouslySetInnerHTML={{ __html: gene_info.deepdive_gpt4o_description ?? '' }} />
          <p><i>Generated by summarizing the top 50 most cited paper abstracts that mention this gene using gpt4o-mini (DeepDive).</i></p>
        </div>

        {gene_info.deepdive_gemini_description && <>
          <input type="radio" name="my_tabs" role="tab" className="tab whitespace-nowrap" aria-label="AI Overview (DeepDive Gemini)" />
          <div role="tabpanel" className="tab-content bg-base-100 border-base-300 px-6 prose  max-w-none prose-p:m-0">
            <style>{`
                #refs {
                  font-size: 80%;
                }
                sup > a {
                  text-decoration: none;
                  color: rgb(6, 69, 173);
                }
              `}</style>
            <ReactMarkdown
              rehypePlugins={[rehypeRaw]}
            >{reformat(gene_info.deepdive_gemini_description)}</ReactMarkdown>
          </div>
        </>}

        {!gene_info.description && !gene_info.deepdive_gpt4o_description && !gene_info.deepdive_gemini_description && <>
          <input type="radio" name="my_tabs" role="tab" className="tab whitespace-nowrap" aria-label="Coming Soon" defaultChecked />
          <div role="tabpanel" className="tab-content bg-base-100 border-base-300 px-6 prose prose-xl max-w-none">
            <p>Descriptions for this gene are not yet available but should be coming soon!</p>
          </div>
        </>}
      </div>
    </div>
  )
}