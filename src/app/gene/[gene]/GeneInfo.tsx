'use client'

import React from 'react'
import MDT from '@/components/mdt'
import useRWSearchParams from '@/components/rwsearchparams'
import type trpc from '@/lib/trpc/server'

type UnPromise<PT> = PT extends Promise<infer T> ? T : never

export default function GeneInfo({ gene_info }: { gene_info: Exclude<UnPromise<ReturnType<typeof trpc.gene_info>>, undefined> }) {
  const [searchParams, setSearchParams] = useRWSearchParams()
  React.useEffect(() => {
    if (searchParams.get('geneinfo') === null && !gene_info.description) {
      if (gene_info.deepdive_gpt4o_description) setSearchParams(sp => sp.set('geneinfo', 'gpt4o'))
      else if (gene_info.deepdive_gemini_description) setSearchParams(sp => sp.set('geneinfo', 'gemini'))
    }
  }, [gene_info])

  return (
    <div className="prose max-w-full border border-b-0 border-secondary rounded-t-lg p-4 flex flex-col gap-4">
      <div className="flex flex-col">
        <h1 className="mb-0 text-6xl">{gene_info.symbol}</h1>
        <h5 className="mt-0 text-2xl">{gene_info.name}</h5>
      </div>
      <div role="tablist" className="tabs tabs-lift tabs-xl">
        <input type="radio" name="geneinfo-tabs" role="tab" className="tab whitespace-nowrap" aria-label="NCBI Description" disabled={!gene_info.description}
          checked={searchParams.get('geneinfo') === null} onChange={evt => {setSearchParams(sp => { if (evt.currentTarget.checked) { sp.delete('geneinfo') } })}}
        />
        <div role="tabpanel" className="tab-content bg-base-100 border-base-300 px-6 prose max-w-none">
          <p>{gene_info.description ?? ''}</p>
          <p><i>Sourced from NCBI EUtils.</i></p>
        </div>

        {gene_info.deepdive_gpt4o_description && <>
          <input type="radio" name="geneinfo-tabs" role="tab" className="tab whitespace-nowrap" aria-label="AI Overview (DeepDive GPT4o)" disabled={!gene_info.deepdive_gpt4o_description}
          checked={searchParams.get('geneinfo') === 'gpt4o'} onChange={evt => {setSearchParams(sp => { if (evt.currentTarget.checked) { sp.set('geneinfo', 'gpt4o') } })}}
           />
          <div role="tabpanel" className="tab-content bg-base-100 border-base-300 px-6 prose max-w-none">
            <MDT src={(gene_info.deepdive_gpt4o_description)} />
            <p><i>Generated by summarizing the top 50 most cited paper abstracts that mention this gene using gpt4o-mini (DeepDive).</i></p>
          </div>
        </>}

        {gene_info.deepdive_gemini_description && <>
          <input type="radio" name="geneinfo-tabs" role="tab" className="tab whitespace-nowrap" aria-label="AI Overview (DeepDive Gemini)"
            checked={searchParams.get('geneinfo') === 'gemini'} onChange={evt => {setSearchParams(sp => { if (evt.currentTarget.checked) { sp.set('geneinfo', 'gemini') } })}}
          />
          <div role="tabpanel" className="tab-content bg-base-100 border-base-300 px-6 prose max-w-none">
            <MDT src={(gene_info.deepdive_gemini_description)} />
            <p><i>Generated by summarizing the top 50 most cited paper abstracts that mention this gene using gemini (DeepDive).</i></p>
          </div>
        </>}

        {!gene_info.description && !gene_info.deepdive_gpt4o_description && !gene_info.deepdive_gemini_description && <>
          <input type="radio" name="geneinfo-tabs" role="tab" className="tab whitespace-nowrap" aria-label="Coming Soon" defaultChecked />
          <div role="tabpanel" className="tab-content bg-base-100 border-base-300 px-6 prose prose-xl max-w-none">
            <p>Descriptions for this gene are not yet available but should be coming soon!</p>
          </div>
        </>}
      </div>
    </div>
  )
}