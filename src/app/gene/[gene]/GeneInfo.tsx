'use client'

import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import remarkSupersub from 'remark-supersub'
import classNames from 'classnames';
import useHash from '@/components/usehash';
import type trpc from '@/lib/trpc/server'

/**
 * Format citations
 */
function reformat(text: string) {
  let i = 0
  let new_text = ''
  // multiple citations at a time
  for (const m1 of text.matchAll(/\[\^(\d+)\]((\s*\[\^\d+\])*)/g)) {
    const updated = [] as string[]

    let contiguous = [+m1[1]]
    for (const m2 of m1[2].matchAll(/\[\^(\d+)\]/g)) {
      const current = +m2[1]
      if (current === contiguous[contiguous.length-1]+1) {
        contiguous.push(current)
      } else if (contiguous.length > 2) {
        updated.push(`[^${contiguous[0]}-${contiguous[contiguous.length-1]}^](#ref-${contiguous[0]})`)
        contiguous = [current]
      } else {
        updated.push(...contiguous.map(el => `[^${el}^](#ref-${el})`))
        contiguous = [current]
      }
    }
    if (contiguous.length > 2) {
      updated.push(`[^${contiguous[0]}-${contiguous[contiguous.length-1]}^](#ref-${contiguous[0]})`)
    } else  {
      updated.push(...contiguous.map(el => `[^${el}^](#ref-${el})`))
    }
    new_text += text.slice(i, m1.index) + updated.join(' ')
    i = m1.index + m1[0].length
  }
  new_text += text.slice(i)
  return new_text
}

type UnPromise<PT> = PT extends Promise<infer T> ? T : never

export default function GeneInfo({ gene_info }: { gene_info: Exclude<UnPromise<ReturnType<typeof trpc.gene_info>>, undefined> }) {
  const [hash, setHash] = useHash()
  return (
    <div className="prose max-w-full border border-b-0 border-secondary rounded-t-lg p-4">
      <h1 className="mb-0">{gene_info.symbol}</h1>
      <h5 className="mt-0">{gene_info.name}</h5>
      <div role="tablist" className="tabs tabs-lift tabs-lg">
        <input type="radio" name="my_tabs" role="tab" className="tab whitespace-nowrap" aria-label="NCBI Description" disabled={!gene_info.description} defaultChecked />
        <div role="tabpanel" className="tab-content bg-base-100 border-base-300 rounded-box px-6 prose prose-xl max-w-none">
          <p>{gene_info.description ?? ''}</p>
          <p><i>Sourced from NCBI EUtils.</i></p>
        </div>

        <input type="radio" name="my_tabs" role="tab" className="tab whitespace-nowrap" aria-label="AI Overview (DeepDive GPT4o)" disabled={!gene_info.deepdive_gpt4o_description} defaultChecked={!gene_info.description} />
        <div role="tabpanel" className="tab-content bg-base-100 border-base-300 rounded-box px-6 prose prose-xl max-w-none">
          <div className="prose-p:m-0" dangerouslySetInnerHTML={{ __html: gene_info.deepdive_gpt4o_description ?? '' }} />
          <p><i>Generated by summarizing the top 50 most cited paper abstracts that mention this gene using gpt4o-mini (DeepDive).</i></p>
        </div>

        {gene_info.deepdive_gemini_description && <>
          <input type="radio" name="my_tabs" role="tab" className="tab whitespace-nowrap" aria-label="AI Overview (DeepDive Gemini)" />
          <div role="tabpanel" className="tab-content bg-base-100 border-base-300 rounded-box px-6 prose prose-xl max-w-none prose-p:m-0">
            <style>{`
              a:has(> sup) {
                text-decoration: none;
              }
              a > sup {
                color: rgb(6, 69, 173);
              }
            `}</style>
            <ReactMarkdown
              remarkPlugins={[remarkSupersub, remarkGfm]}
              components={{
                section: ({ node, children, className, ...props }) =>
                  'data-footnotes' in props ?
                  <section className={classNames(className, 'hidden')} {...props}>{children}</section>
                  : <section className={className} {...props}>{children}</section>,
                a: ({ node, children, ...props }) =>
                  'data-footnote-ref' in props ?
                    hash === `#${props.id}` ?
                      <span className="tooltip tooltip-primary tooltip-open" data-tip={JSON.stringify(node)}>
                        <a {...props} href={`#`} onClick={evt => {evt.preventDefault(); setHash(`#`)}}>{children}</a>
                      </span>
                      : <a {...props} href={`#${props.id}`} onClick={evt => {evt.preventDefault(); setHash(`#${props.id}`)}}>{children}</a>
                    : <a {...props}>{children}</a>,
              }}
            >{reformat(gene_info.deepdive_gemini_description)}</ReactMarkdown>
          </div>
        </>}

        {!gene_info.description && !gene_info.deepdive_gpt4o_description && !gene_info.deepdive_gemini_description && <>
          <input type="radio" name="my_tabs" role="tab" className="tab whitespace-nowrap" aria-label="Coming Soon" defaultChecked />
          <div role="tabpanel" className="tab-content bg-base-100 border-base-300 rounded-box px-6 prose prose-xl max-w-none">
            <p>Descriptions for this gene are not yet available but should be coming soon!</p>
          </div>
        </>}
      </div>
    </div>
  )
}